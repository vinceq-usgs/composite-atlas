#! /usr/bin/env python

import os.path

import aggregate

import numpy as np
import json
from glob import glob

# For plotting
from impactutils.colors.cpalette import ColorPalette
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature

MAP_SPAN = [-124.5,-114,32.5,42.2]
PROJ = ccrs.PlateCarree()
MITYPE = 'mmi'
REDO = True

lats=[]
lons=[]
vals=[]

nevents = len(glob("./aggregated/*"))
print('Found',nevents,'events.')

tstr = 'NCELLS Atlas ShakeMap cells, NEVENTS events, Automatic + Reviewed'.replace('NEVENTS',str(nevents))
print(tstr)

plotdatafile = 'output/allplotdata.json'
if not os.path.isfile(plotdatafile) or REDO:
    print('Loading cell data.')
    with open('output/allcells_%s.json' % MITYPE,'r') as f:
        allcells = json.load(f)
    print('Got',len(allcells),'cells.')

    n=0
    nbad=0
    for utmcell,cell in allcells.items():
        n+=1
        if not n % 100000:
            print(n,'Processing cell',utmcell)
        try:
            poly = aggregate.getUtmPolyFromString(utmcell,10000)
        except:
            nbad+=1
            continue
        lon,lat = poly['center']['coordinates']
        val = float(cell['max'])

        lats.append(lat)
        lons.append(lon)
        vals.append(val)

    allplotdata = { 'lats': lats, 'lons': lons, 'vals': vals }
    with open(plotdatafile,'w') as f:
        json.dump(allplotdata,f,indent=4)
    print('Finished processing',len(vals),'cells, ignoring',nbad,'bad cells.')

else:
      with open(plotdatafile,'r') as f:
        allplotdata=json.load(f)

lats = allplotdata['lats']
lons = allplotdata['lons']
vals = allplotdata['vals']

print('Converting to arrays.')
lats = np.array(lats)
lons = np.array(lons)
vals = np.array(vals)

print('Computing colors.')
palette = ColorPalette.fromPreset(MITYPE)
colors = [palette.getDataColor(maxcdi,color_format='hex') for maxcdi in vals]
print('Finished coloring',len(colors),'cells.')

tstr = tstr.replace('NCELLS',str(len(lats)))
fig = plt.figure(figsize=(12,6))
ax = plt.axes(projection=PROJ)
if MAP_SPAN:
    ax.set_extent(MAP_SPAN)
else:
    ax.set_global()

ax.coastlines()
states_provinces = cfeature.NaturalEarthFeature(
        category='cultural',
        name='admin_1_states_provinces_lines',
        scale='50m',
        facecolor='none')
ax.add_feature(states_provinces)
ax.add_feature(cfeature.BORDERS)
    
plt.scatter(lons,lats,color=colors,
         marker='s', s=20,
         linewidth=0,
         transform=ccrs.PlateCarree())

plt.title(tstr)

#save the results as a PDF file in the current directory
# homedir = os.path.expanduser('~')
homedir = '.'
print('Creating png')
pngfile = 'ca_atlas.png'
outfile = os.path.join(homedir,pngfile)
plt.savefig(outfile)
#print('Creating pdf')
#outfile = os.path.join(homedir,'global_shakemap.pdf')
#plt.savefig(outfile)
print('Done with output file',pngfile)
